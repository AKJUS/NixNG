#!/nix/store/9ywr69qi622lrmx5nn88gk8jpmihy0dz-bash-4.4-p23/bin/bash
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

_opt_all="false"

for arg in $@ ; do
    case $arg in
	"-a" | "--all")
	    _opt_all="true"
	    ;;
	*)
	    printf "Unrecognized argument: $arg\n" ; exit 1
	    ;;
    esac
done

_staged_files="$(git diff --name-only --staged)"

if [[ "$_opt_all" == "true" ]] ; then
    _nix_files="$(find . -name '*.nix' -and ! -name "license-header.nix"  | tr '\n' ' ')"
    _sh_files="$(find . -name '*.sh' | tr '\n' ' ')"
else
    _nix_files="$(printf "$_staged_files" | grep -ie '^.*\.nix$' | grep --invert-match -e 'license-header\.nix' )"
    _sh_files="$(grep -i -e '\.sh$' <<<"$_staged_files")"
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)
_license_header_file="dev-utils/hooks/license-header.nix"
_license_header="$(sed 's/\$\$YEAR\$\$/'"$(date +'%Y')"'/' $_license_header_file)"

# Redirect output to stderr.
exec 1>&2

# Format all nix files with nixpkgs-fmt to be consistent with nixpkgs
if [[ "$_nix_files" != "" ]] ; then
    nixpkgs-fmt $_nix_files
fi

_missing_license_header_file_count=0
for file in $_nix_files ; do # FIXME: disable processing of shell scripts for now $_sh_files
    _file_header=""
    if [[ "$(head -c 2 $file)" == '#!' ]] ; then
	_file_header="$(head -n $(wc -l "$_license_header_file" | cut -d ' ' -f1) $file | tail -n +2)"
	echo "$_file_header"
    else
	_file_header="$(head -n $(wc -l "$_license_header_file" | cut -d ' ' -f1) $file)"
    fi

    if [[ "$_file_header" != "$_license_header"
	       && "$file" != "$_license_header_file" ]] ; then
	printf "File '${file}' is missing the proper license header.\n"
	_missing_license_header_file_count="$(($_missing_license_header_file_count + 1))"
    fi
done

if [[ "$_missing_license_header_file_count" > 0 ]] ; then
    printf "$_missing_license_header_file_count files are missing license headers, please fix it.\n"
    exit 1
fi

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
if [[ "$_opt_all" == "true" ]] ; then
    _whitespace_files="$(grep -lr '[[:blank:]]$' . | grep '\.nix$')"

    if [[ "$_whitespace_files" != "" ]] ; then
	printf 'Some files contain trailing whitespace, please fix it.\n'"$_whitespace_files"'\n' ; exit 1
    fi
else
    exec git diff-index --check --cached $against --
fi
