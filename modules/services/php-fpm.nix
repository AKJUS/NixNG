/*
 * NixNG
 * Copyright (c) 2021  GPL Magic_RB <magic_rb@redalder.org>
 *
 *  This file is free software: you may copy, redistribute and/or modify it
 *  under the terms of the GNU General Public License as published by the
 *  Free Software Foundation, either version 3 of the License, or (at your
 *  option) any later version.
 *
 *  This file is distributed in the hope that it will be useful, but
 *  WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *  General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * This file incorporates work covered by the following copyright and  
 * permission notice:  
 *  
 *     Copyright (c) 2003-2021 Eelco Dolstra and the Nixpkgs/NixOS contributors
 *     
 *     Permission is hereby granted, free of charge, to any person obtaining
 *     a copy of this software and associated documentation files (the
 *     "Software"), to deal in the Software without restriction, including
 *     without limitation the rights to use, copy, modify, merge, publish,
 *     distribute, sublicense, and/or sell copies of the Software, and to
 *     permit persons to whom the Software is furnished to do so, subject to
 *     the following conditions:
 *     
 *     The above copyright notice and this permission notice shall be
 *     included in all copies or substantial portions of the Software.
 *     
 *     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *     EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 *     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 *     NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
 *     LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 *     OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 *     WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */

{ pkgs, config, lib, nglib, ... }:
with lib;
let
  cfg = config.services.php-fpm;

  runtimeDir = "/run/php-fpm/";

  genPhpIniFile = { settings, package }: pkgs.runCommandNoCC "php.ini"
    {
      phpSettings = settings;
      phpGlobalSettings = cfg.phpSettings;
      passAsFile = [ "phpSettings" "phpGlobalSettings" ];
      preferLocalBuild = true;
    }
    ''
      cat ${package}/etc/php.ini $phpGlobalSettingsPath $phpSettingsPath > $out 
    '';

  genFpmConfFile = { settings }: pkgs.runCommandNoCC "php-fpm.conf"
    {
      fpmSettings = settings;
      fpmGlobalSettings = cfg.fpmSettings;
      passAsFile = [ "fpmSettings" "fpmGlobalSettings" ];
      preferLocalBuild = true;
    }
    ''
      cat $fpmGlobalSettingsPath $fpmSettingsPath > $out 
    '';

  poolOpts = { name, ... }: {
    options = {
      socket = mkOption {
        type = types.str;
        readOnly = true;
        description = ''
          Path to the unix socket file on which to accept FastCGI requests.
          <node><para>This options is read-only and managed by NixOS.</para></note>
        '';
        example = "${runtimeDir}<name>.sock";
      };

      createUserGroup = mkOption {
        description = ''
          Whether to create the default user <literal>www-data</literal>
          and group <literal>www-data</literal>.
        '';
        type = types.bool;
        default = true;
      };

      fpmSettings = mkOption {
        type = with types; attrsOf (oneOf [ str int bool ]);
        default = {};
        description = ''
          PHP-FPM global directives. Refer to the "List of global php-fpm.conf directives" section of
          <link xlink:href="https://www.php.net/manual/en/install.fpm.configuration.php"/>
          for details. Note that settings names must be enclosed in quotes (e.g.
          <literal>"pm.max_children"</literal> instead of <literal>pm.max_children</literal>).
          You need not specify the options <literal>error_log</literal> or
          <literal>daemonize</literal> here, since they are generated by NixNG.
        '';
      };

      phpSettings = mkOption {
        type = with types; attrsOf (oneOf [ str int bool ]);
        default = {};
        example = literalExample ''
          {
            "date.timezone" = "CET";
          }
        '';
        description = ''
          Options for PHP configuration files <filename>php.ini</filename>.
        '';
      };

      package = mkOption {
        type = types.package;
        default = pkgs.php74;
        description = ''
          The PHP package to use for running this PHP-FPM pool.
        '';
      };

      environment = mkOption {
        type = with types; attrsOf (oneOf [ str int bool ]);
        default = {};
        description = ''
          Environment variables used for this PHP-FPM pool.
        '';
        example = literalExample ''
          {
            HOSTNAME = "$HOSTNAME";
            TMP = "/tmp";
            TMPDIR = "/tmp";
            TEMP = "/tmp";
          }
        '';
      };
    };

    config = {
      socket = "${runtimeDir}/${name}.sock";
      fpmSettings = mapAttrs (_: mkDefault) {
        user = "www-data";
        group = "www-data";
        listen = cfg.pools.${name}.socket;
        "listen.owner" = "www-data";
        "listen.group" = "www-data";
        "listen.mode" = "0660";
      };
    };
  };
in
{
  options.services.php-fpm = {
    fpmSettings = mkOption {
      type = with types; attrsOf (oneOf [ str int bool ]);
      default = {};
      apply = x: nglib.generators.php.fpm {} x "global";
      description = ''
        PHP-FPM global directives. Refer to the "List of global php-fpm.conf directives" section of
        <link xlink:href="https://www.php.net/manual/en/install.fpm.configuration.php"/>
        for details. Note that settings names must be enclosed in quotes (e.g.
        <literal>"pm.max_children"</literal> instead of <literal>pm.max_children</literal>).
        You need not specify the options <literal>error_log</literal> or
        <literal>daemonize</literal> here, since they are generated by NixNG.
        Each pools config will be prepended with these.
      '';
    };

    phpSettings = mkOption {
      type = with types; attrsOf (oneOf [ str int bool ]);
      default = {};
      apply = nglib.generators.php.ini;
      example = literalExample ''
        {
          "date.timezone" = "CET";
        }
      '';
      description = ''
        Global options for PHP configuration files <filename>php.ini</filename>.
        Each pool's config will be prepended with these.
      '';
    };

    pools = mkOption {
      type = with types; attrsOf (submodule poolOpts);
      default = {};
      description = ''
        PHP-FPM "pools", think of each pool as a separate php-fpm instance.
        If none are defined, the php-fpm service module does nothing.
      '';
    };
  };

  config = 
    mkIf (cfg.pools != {}) {
      services.php-fpm.fpmSettings = {
        daemonize = false;
      };

      init.services = mapAttrs' (pool: opts:
        nameValuePair "php-fpm-${pool}" {
          enabled = true;
          ensureSomething.create."runtimeDir" = {
            type = "directory";
            dst = runtimeDir;
            # TODO: shouldn't be persistent but we could delete a socket
            # from another pool
            persistent = true;
          };
          script =
            let
              phpIniFile = genPhpIniFile
                { settings = nglib.generators.php.ini opts.phpSettings;
                  package = opts.package;
                };

              phpFpmConfFile = genFpmConfFile
                { settings = nglib.generators.php.fpm opts.environment opts.fpmSettings pool;
                };
            in
              pkgs.writeShellScript "php-fpm-${pool}-run"
                ''
                  echo HELLO
                  ${opts.package}/bin/php-fpm -y ${phpFpmConfFile} -c ${phpIniFile}
                '';
        }
      ) cfg.pools;

      users.users = builtins.listToAttrs (filter (x: x.value != null)
        (mapAttrsToList (pool: opts:
          let
            user = opts.phpSettings.user;
          in
            nameValuePair user
              (if opts.createUserGroup then
                {
                  description = "PHP-FPM - ${pool}";
                  group = user;
                  createHome = false;
                  home = "/var/empty";
                  useDefaultShell = true;
                  uid = config.ids.uids.${user};
                }
               else
                 null)
        ) cfg.pools));

      users.groups = builtins.listToAttrs (filter (x: x.value != null)
        (mapAttrsToList (pool: opts:
          let
            group = opts.phpSettings.group;
          in
            nameValuePair group
              (if opts.createUserGroup then
                {
                  gid = config.ids.gids.${group};
                }
               else
                 null)
        ) cfg.pools));
    };
}
